#!/usr/bin/env bash

# function to display usage information
usage() {
  echo "An rsync wrapper to sync simulations and source code between machines"
  echo ""
  echo "Usage"
  echo "  $0 {-t,-f} <host> [-a] [-r] [-o] [-c] [-s] [-d <folder>] [-h] [-- <args>]"
  echo ""
  echo "Available flags:"
  echo "  -t, --to             Sync to <host>"
  echo "  -f, --from           Sync from <host>"
  echo "  -o, --output         Sync contents of 'simulations/*/output-*'"
  echo "  -c, --checkpoints    Sync contents of 'simulations/*/checkpoints'"
  echo "  -p, --project        Sync contents of 'bin/' and 'par/'"
  echo "  -i, --installation   Sync everything except 'configs/' and 'exe/'"
  echo "  -d, --directory      Only sync directories that match the query in -o, -c. Wildcards are supported"
  echo "  -h, --help           Prints this help dialog"
  echo "  --                   Everything after this separator will be used as include queries to rsync"
  echo ""

  exit 0
}

# define CLI variables
to=""
from=""
sync_output=false
sync_checkpoints=false
sync_project=false
sync_installation=false
directory=""

# parse command-line options
if [[ $# -eq 0 ]]; then
  usage
fi

while [[ $# -gt 0 ]]; do
  case "$1" in
    -t|--to)
      to=$2
      shift 2
      ;;
    -f|--from)
      from=$2
      shift 2
      ;;
    -o|--output)
      sync_output=true
      shift 1
      ;;
    -c|--checkpoints)
      sync_checkpoints=true
      shift 1
      ;;
    -p|--project)
      sync_project=true
      shift 1
      ;;
    -i|--installation)
      sync_installation=true
      shift 1
      ;;
    -d|--directory)
      directory=$2
      shift 2
      ;;
    -h|--help)
      usage
      ;;
    --)
      shift 1
      break
      ;;
    *)
      echo "Unknown option: '$1', use -h, --help for more information"
      exit 1
      ;;
  esac
done

# remaining text should be include statements to pass to rsync
includes=("$@")

# exit if there is some error in parsing the arguments
if [ $? -ne 0 ]; then
  echo "An unknown error took place while parsing the arguments"
  exit 1
fi

# if the user provides flags to rsync, store them in a temporary file
include_file=$(mktemp)
echo "*" > $include_file
if [ ${#includes[@]} -ne 0 ]; then
  printf "%s\n" "${includes[@]}" > "$include_file"
fi

# argument check: only '-t' or '-f' must be provided
if [ -n "$to" ] && [ -n "$from" ]; then
  echo "Supply either -t, --to or -f, --from but not both"
  exit 1
fi

# fetch source and destination folders
if [ -n "$to" ]; then
  src="."
  dest=$(jq -r --arg k "$to" '.[$k]' $(dirname $(realpath $0))/hosts.json)

  if [ "$dest" == "null" ]; then
    echo "Error, unknown host"
    exit 1
  fi

  dest=$to:$dest

elif [ -n "$from" ]; then
  dest="."
  src=$(jq -r --arg k "$from" '.[$k]' $(dirname $(realpath $0))/hosts.json)

  if [ "$src" == "null" ]; then
    echo "Error, unknown host"
    exit 1
  fi

  src=$from:$src
fi

# run rsync commands
if [ "$sync_output" == true ]; then
  echo "[*] Sync the output directories"
  rsync                                                                                   \
    -rLptDh                                                                               \
    --progress                                                                            \
    --include='*/' --exclude='checkpoints/**' --include-from=$include_file --exclude='*'  \
    "$src/simulations/$directory" "$dest/simulations/"
  echo ""
fi

if [ "$sync_checkpoints" == true ]; then
  echo "[*] Sync the checkpoint directories"
  rsync                                     \
    -rLptDh                                 \
    --progress                              \
    --include='*/' --exclude='output-*/**'  \
    "$src/simulations/$directory" "$dest/simulations/"
  echo ""
fi

if [ "$sync_project" == true ]; then
  echo "[*] Sync 'par/' and 'bin/'"
  rsync                                                                                    \
    -rLptDh                                                                                \
    --progress                                                                             \
    --delete                                                                               \
    --include='bin/' --include='bin/**' --include='par/' --include='par/**' --exclude='*'  \
    "$src/" "$dest/"
  echo ""
fi

if [ "$sync_installation" == true ]; then
  echo "[*] Sync everything except 'configs/' and 'exe/'"
  rsync                                                      \
    -rlptDh                                                  \
    --progress                                               \
    --delete                                                 \
    --exclude='exe/' --exclude='configs/' --exclude='TEST/'  \
    "$src/" "$dest/"
  echo ""
fi

# remove temporary
rm $include_file
