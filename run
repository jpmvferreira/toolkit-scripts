#!/usr/bin/env bash

# NOTES:
# - "--bind-to none" on `mpirun` and "--cpu-bind=none" on `srun` ensure that threads don't bind to a specific core
# - to use job dependencies in Slurm you have to set 'NaNChecker::action_if_found' to 'abort' for the toolkit to return a non-zero exit code if the simulation encounters a NaN
# - having spaces in any of the folders name will break this script!

# TODO:
# - is there a way for me to remove old checkpoints after the new one has been written to the disk?

# ensure that the exit signals will propagate through pipes
set -o pipefail

# function to display usage information
usage() {
  echo "A CLI to automate and simplify the execution of Cactus binaries"
  echo ""
  echo "Usage:"
  echo "  $0 -e <executable> -p <parfile> -c <path> -o <path> -O -a -s -S -t <1,2,..,all> -p <1,2,..,all> -h -- <args for Slurm>"
  echo ""
  echo "Available flags:"
  echo "  -e, --exe        <path>          Executable file (required)"
  echo "  -p, --par        <path>          Parameter file"
  echo "  -o, --output     <path>          Output folder (default: './simulations')"
  echo "  -c, --continue   <path>          Continue a simulation with the parfile from the previous run"
  echo "  -O, --overwrite                  Overwrite if output folder already exists"
  echo "  -a, --append                     Append to already existing simulation, specified in the parfile"
  echo "  -s, --sbatch                     Run using Slurm via sbatch"
  echo "  -t, --threads    <1,2,..,[all]>  The Nº of threads (localhost only)"
  echo "  -P, --processes  <[1],2,..,all>  The Nº of processes (localhost only)"
  echo "  -m, --move                       Move the parfile instead of copying it to the output directory"
  echo "  -h, --help                       Prints this help dialog"
  echo "  --                               Everything after this separator will be dispatched verbatim to sbatch"
  echo ""
  echo "Environmental variables:"
  echo "  \$CACTUS_SOURCE  If exists, it will be sourced before running the binary"
}

# define CLI variables
exe=""
par=""
output="simulations"
cont=""               # not using 'continue' as variable name since its a shell built-in
overwrite=false
append=false
sbatch=false
threads="all"
processes=1
move=false

# parse command-line options
if [[ $# -eq 0 ]]; then
  usage
  exit 1
fi

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      exit 0
      ;;
    -e|--exe)
      exe=$(realpath $2)
      shift 2
      ;;
    -p|--par)
      par=$(realpath $2)
      shift 2
      ;;
    -o|--output)
      output=$(realpath $2)
      shift 2
      ;;
    -c|--continue)
      cont=$(realpath $2)
      shift 2
      ;;
    -O|--overwrite)
      overwrite=true
      shift 1
      ;;
    -a|--append)
      append=true
      shift 1
      ;;
    -s|--sbatch)
      sbatch=true
      shift 1
      ;;
    -t|--threads)
      threads=$2
      shift 2
      ;;
    -P|--processes)
      processes=$2
      shift 2
      ;;
    -m|--move)
      move=true
      shift 1
      ;;
    --)
      shift 1
      break
      ;;
    *)
      echo "Unknown option: "$1", use -h, --help for more information"
      exit 1
      ;;
  esac
done

# remaining arguments to be passed verbatim to sbatch
flags="$@"

# exit if there is some error in parsing the arguments
if [ $? -ne 0 ]; then
  echo "An unknown error took place while parsing the arguments"
  exit 1
fi

# the executable must always be provided
if [[ -z $exe ]]; then
  echo "Error: executable file (-e, --exe) is required"
  exit 1
fi

if [ ! -e $exe ]; then
  echo "Error: no executable file found at $exe"
  exit 1
fi

# either a parfile or '--continue' must be provided
if [[ -n $par && -n $cont ]]; then
  echo "Error: either --par or --continue must be provided, not both"
  exit 1
fi

# if parfile was provided, then it must exist
if [[ -n $par && ! -e $par ]]; then
  echo "Error: no parfile found at $par"
  exit 1
fi

# warn the user that '--continue' ignores '--output', '--append' and '--overwrite'
if [[ -n $cont ]]; then
  if [[ $output != "simulations" || $append == true || $overwrite == true ]]; then
    echo "Warning: using --continue ignores --output, --append and --overwrite"
  fi
fi

# threads and processes must be integers or "all"
if [[ "$threads" != "all" && ! "$threads" =~ ^-?[0-9]+$ ]]; then
  echo "Error on parsing arguments: -t, --threads is not an integer or 'all'"
  exit 1
fi

if [[ "$processes" != "all" && ! "$processes" =~ ^-?[0-9]+$ ]]; then
  echo "Error on parsing arguments: -p, --processes is not an integer or 'all'"
  exit 1
fi

# overwrite and append cannot be provided simultaneously
if [ "$overwrite" == true ] && [ "$append" == true ]; then
  echo "Error on parsing arguments: -o, --overwrite and -a, --append cannot be provided simultaneously"
  exit 1
fi

# if $threads is set to "all", find how many threads we available on this system using `nproc`
# do the same for the number of processes
if [[ "$threads" == "all" ]]; then
  threads=$(nproc)
fi

if [[ "$processes" == "all" ]]; then
  processes=$(nproc)
fi

# there's a branch here with two possible scenarios
# either the user has provided '--continue' and we fetch the parfile from the latest run and append on top of that
# or the user provided a parfile and we use it to create the new simulation
# after that, execution is the same for both cases
if [[ -n $cont ]]; then
  # check if the folder exists
  if [[ ! -d $cont ]]; then
    echo "Error: $cont doesn't exist or exists but is not a folder"
    exit 1
  fi

  cd $cont
  name=$(basename $(pwd))

  # check what's the new output-XXXX folder
  for i in {0000..9999}; do
    outputdir="output-$i"
    if [ ! -d "$outputdir" ]; then
      mkdir "$outputdir"
      break
    fi
  done

  # copy the parfile from output-XXXX minus 1 to output-XXXX
  i_prev=$(printf "%04d" $((10#$i - 1)))
  outputdir_prev="output-$i_prev"
  cp $outputdir_prev/*.par $outputdir

  # find out what's the name of the parfile
  # assuming there's only one parfile per folder
  par=$(find $outputdir -iname '*.par' -print -quit)

  # cd into to output folder
  cd $outputdir

# deal with the case where the user provided a parfile
else
  # fetch run name from parfile
  # this should be present in 'IO::out_dir' and will be assigned to `$name`
  name=$(grep 'IO::out_dir' $par | sed 's/.*= "\(.*\)".*/\1/')

  if [[ "$name" == *"$"* ]]; then
    echo "'$' found in 'IO::out_dir', this is probably a variable and I don't know its value, I'm bailing out!"
    exit 1
  fi

  # the run directory (that includes the simulation output and checkpoints) is "simulations/$name"
  rundir="$output/$name"

  # if the run directory exists and neither -o, --overwrite or -a, --append is set, refuse to proceed
  if [ -e "$rundir" ] && [ $overwrite == false ] && [ $append == false ]; then
    echo "Run directory '$rundir' already exists and neither -O, --overwrite nor -a, --append have been provided"
    exit 1
  fi

  # if run directory exists and `overwrite` is toggled, remove everything
  if [ $overwrite == true ] && [ -e "$rundir" ]; then
    rm -rf "$rundir"
  fi

  # ensure run directory exists and cd into it
  mkdir -p "$rundir"
  mkdir -p "$rundir/checkpoints"
  cd "$rundir"

  # at this point we know the run directory exists and is empty, or exists but `append` is toggled
  # we need to create the output for the N-th run
  for i in {0000..9999}; do
    outputdir="output-$i"
    if [ ! -d "$outputdir" ]; then
      mkdir "$outputdir"
      break
    fi
  done

  # cd into $outputdir and move/copy the parfile here
  cd "$outputdir"

  if [ $move == true ]; then
    mv "$par" .
  else
    cp "$par" .
  fi

  # change 'IO::out_dir' to `.`, and assume 'IO::checkpoint_dir' and 'IO::recover_dir' are set to '../checkpoints' already
  sed -i "s|^IO::out_dir.*|IO::out_dir = \".\"|" $(basename "$par")
fi

# if we're using sbatch
if [ "$sbatch" == true ]; then
  # '--cpu-bind' was '--cpu_bind' a few versions ago
  # adding this for bakcwards compatability
  cpubind="cpu-bind"
  versionref="17.02.11"
  version=$(sbatch -V | cut -d "" -f 2)
  if [[ "$(echo -e "$version\n$versionref" | sort -V | head -n 1)" == "$versionref" ]]; then
    cpubind="cpu_bind"
  fi

  sbatch --job-name="$name" -o "out.log" $flags <<EOF
#!/usr/bin/env bash

# check whether there's something to source on the remote machine before we proceed
if [ -n "\${CACTUS_SOURCE}" ] && [ -f \$CACTUS_SOURCE ]; then
  source \$CACTUS_SOURCE

  # exit if the sourcing is unsuccessful
  if [ $? -ne 0 ]; then
    echo "An unknown error occured while sourcing \$CACTUS_SOURCE"
    exit 1
  fi
fi

export CACTUS_STARTTIME=\$(date +%s)
export CACTUS_NUM_PROCS=\$SLURM_NTASKS
export OMP_NUM_THREADS=\$SLURM_CPUS_PER_TASK

srun --"$cpubind"=none -- "$exe" $(basename "$par")
EOF

# otherwise, we're using localhost
else
  # check whether there's something to source on the localhost before we proceed
  if [ -n "${CACTUS_SOURCE}" ] && [ -f $CACTUS_SOURCE ]; then
    source $CACTUS_SOURCE

    # exit if the sourcing is unsuccessful
    if [ $? -ne 0 ]; then
      echo "An unknown error occured while sourcing $CACTUS_SOURCE"
      exit 1
    fi
  fi

  export CACTUS_STARTTIME=$(date +%s)
  export CACTUS_NUM_PROCS=$processes
  export OMP_NUM_THREADS=$threads

  mpirun -np $processes --bind-to none -- "$exe" $(basename "$par") |& tee "out.log"
fi

# exit if something was wrong
if [ $? -ne 0 ]; then
  exit 1
fi

# otherwise, we made it!
exit 0
